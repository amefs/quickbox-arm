#!/bin/bash
#
# [QuickBox ARM qBittorrent Updater]
#
# GitHub:   https://github.com/amefs/quickbox-lite
# Author:   Amefs
# Current version:  v1.0.0
# URL:
# Original Repo:    https://github.com/QuickBox/QB
# Credits to:       QuickBox.io
#
#   Licensed under GNU General Public License v3.0 GPL-3 (in short)
#
#   You may copy, distribute and modify the software as long as you track
#   changes/dates in source files. Any modifications to our software
#   including (via compiler) GPL-licensed code must also be made available
#   under the GPL along with build & install instructions.
#
#################################################################################
#################################################################################
# CORE VARIABLE
#################################################################################
CODENAME=$(lsb_release -cs)

################################################################################
# HELP FUNCTIONS
################################################################################
export NEWT_COLORS='
root=,black
window=,lightgray
shadow=,color8
title=color8,
checkbox=,magenta
entry=,color8
label=blue,
actlistbox=,magenta
actsellistbox=,magenta
helpline=,magenta
roottext=,magenta
emptyscale=magenta
disabledentry=magenta,
'

_norm=$(tput sgr0)
_red=$(tput setaf 1)
_green=$(tput setaf 2)
_tan=$(tput setaf 3)
_cyan=$(tput setaf 6)

function _execute() {
	($1 >>"${OUTTO}" 2>&1)
}
function _print() {
	printf "${_norm}%s${_norm}\n" "$@"
	printf "%s\n" "$@" >>"${OUTTO}"
}
function _info() {
	printf "${_cyan}➜ %s${_norm}\n" "$@"
	printf ">> Info: %s\n" "$@" >>"${OUTTO}"
}
function _success() {
	printf "${_green}✓ %s${_norm}\n" "$@"
	printf ">> Success: %s\n" "$@" >>"${OUTTO}"
}
function _warning() {
	printf "${_tan}⚠ %s${_norm}\n" "$@"
	printf ">> Warning: %s\n" "$@" >>"${OUTTO}"
}
function _error() {
	printf "${_red}✗ %s${_norm}\n" "$@"
	printf ">> Error: %s\n" "$@" >>"${OUTTO}"
}

function _version_gt() { test "$(printf '%s\n' "$@" | sort -V | head -n 1)" != "$1"; }
#################################################################################
# APP VARIABLE
#################################################################################
APP_TITLE="qBittorrent"
APP_NAME="qbittorrent"
APP_SERVICE="qbittorrent"

APP_LOCK=.$APP_NAME.lock
OUTTO=/srv/dashboard/db/output.log
qbitversion=4.2.5
cdn=$(cat /install/.cdn.lock)

BRANCH_QBIT="https://github.com/qbittorrent/qBittorrent.git"
BRANCH_LIBQBPASS="https://github.com/KozakaiAya/libqbpasswd.git"
FORCE=0

################################################################################
# SCRIPT FUNCTIONS
################################################################################
function _usage() {
	echo -e "\nQuickBox ARM $APP_TITLE Updater"
	echo -e "\nUsage: \n$(basename "$0") [-h] [-l logfile] [--qb]"
	echo -e "\nOptions:\n"
	echo "-l, --log <logfile>       specific log file"
	echo "--qb <version>            the qbittorrent version you want to install"
	echo "--force                   force downgrade qBittorrent"
	echo "--with-cf                 use cloudflare instead of github"
	echo "--with-sf                 use sourceforge instead of github"
	echo "--with-osdn               use osdn(jp)  instead of github"
	echo "--with-github             use github"	
	echo ""
	echo "-h, --help                display this help and exit"
}
################################################################################
# REMOVE FUNCTIONS
################################################################################
function _lockCheck() {
	if [[ -f "/install/.install.lock" ]]; then
		prevApp=$(cat /install/.install.lock)
		_info "$prevApp process running."
		_info "If you believe this to be in error, please manually remove the /install/.install.lock"
		_error "Exiting..."
		exit 1
	fi
	if [[ ! -f "/install/$APP_LOCK" ]]; then
		_error "${APP_TITLE} haven't installed ..."
		exit 1
	fi
}
function _setLock() {
	echo "${APP_TITLE}" >/install/.install.lock
}
function _lockCleanup() {
	rm -f /install/.install.lock
}

function _installDepends() {
	_info "Installing ${APP_TITLE} dependencies..."
	local DEPLIST="${APP_BASEDEPS}"
	for depend in $DEPLIST; do
		_info "Installing ${depend}... "
		_execute "apt-get -y --allow-unauthenticated -f install ${depend}" || { _error "Could not install ${depend}." && dependError=1; }
	done
	if [[ $dependError != "1" ]]; then
		_success "${APP_TITLE} dependencies installed."
	else
		_error "${APP_TITLE} dependencies failed to install."
		exit 1
	fi
}


function _installFpm() {
	fpm -h >/dev/null 2>&1
	exit=$?
	if [[ ! $exit == '0' ]]; then
		_info "Installing fpm package management..."
		_execute "apt-get install -yqq ruby ruby-dev rubygems build-essential"
		_execute "gem install -N fpm"
		_success "fpm installed."
	fi
}

function _updateInfo() {
	_print "
$APP_TITLE will now be updated.

This process may take a few minutes
Please wait until the process is completed
"
}

function _cf() {
	DOMAIN="deb.ezapi.net"
	SUBFOLDER=""
	ARCH="armhf"
	SUFFIX=""
}

function _sf() {
	DOMAIN="sourceforge.net"
	SUBFOLDER="projects/seedbox-software-for-linux/files/"
	ARCH="armhf"
	SUFFIX="/download"
}

function _osdn() {
	DOMAIN="osdn.dl.osdn.net"
	SUBFOLDER="storage/g/s/se/seedbox-software-for-linux/"
	ARCH="armhf"
	SUFFIX=""
}

function _github() {
	DOMAIN="raw.githubusercontent.com"
	SUBFOLDER="amefs/quickbox-files/master/"
	ARCH="armhf"
	SUFFIX=""
}

function _download() {
	# init download url
	PACKAGE=$1
	DEB=$2
	case "$cdn" in
	"cf")
		_cf
		wget -t3 -T20 -q -O ${DEB} https://${DOMAIN}/${SUBFOLDER}${CODENAME}/binary-${ARCH}/${PACKAGE}/${DEB}${SUFFIX}
		if [ $? -ne 0 ]; then
			_github
			wget -t5 -T10 -q -O ${DEB} https://${DOMAIN}/${SUBFOLDER}${CODENAME}/binary-${ARCH}/${PACKAGE}/${DEB}${SUFFIX}
			if [ $? -ne 0 ]; then
				_sf
				wget -t5 -T10 -q -O ${DEB} https://${DOMAIN}/${SUBFOLDER}${CODENAME}/binary-${ARCH}/${PACKAGE}/${DEB}${SUFFIX}
			fi
		fi
		;;
	"sf")
		_sf
		wget -t3 -T10 -q -O ${DEB} https://${DOMAIN}/${SUBFOLDER}${CODENAME}/binary-${ARCH}/${PACKAGE}/${DEB}${SUFFIX}
		if [ $? -ne 0 ]; then
			_github
			wget -t5 -T20 -q -O ${DEB} https://${DOMAIN}/${SUBFOLDER}${CODENAME}/binary-${ARCH}/${PACKAGE}/${DEB}${SUFFIX}
			if [ $? -ne 0 ]; then
				_cf
				wget -t5 -T10 -q -O ${DEB} https://${DOMAIN}/${SUBFOLDER}${CODENAME}/binary-${ARCH}/${PACKAGE}/${DEB}${SUFFIX}
			fi
		fi
		;;
	"osdn")
		_osdn
		wget -t3 -T10 -q -O ${DEB} https://${DOMAIN}/${SUBFOLDER}${CODENAME}/binary-${ARCH}/${PACKAGE}/${DEB}${SUFFIX}
		if [ $? -ne 0 ]; then
			_github
			wget -t5 -T20 -q -O ${DEB} https://${DOMAIN}/${SUBFOLDER}${CODENAME}/binary-${ARCH}/${PACKAGE}/${DEB}${SUFFIX}
			if [ $? -ne 0 ]; then
				_cf
				wget -t5 -T10 -q -O ${DEB} https://${DOMAIN}/${SUBFOLDER}${CODENAME}/binary-${ARCH}/${PACKAGE}/${DEB}${SUFFIX}
			fi
		fi
		;;
	"github")
		_github
		wget -t3 -T10 -q -O ${DEB} https://${DOMAIN}/${SUBFOLDER}${CODENAME}/binary-${ARCH}/${PACKAGE}/${DEB}${SUFFIX}
		if [ $? -ne 0 ]; then
			_cf
			wget -t5 -T20 -q -O ${DEB} https://${DOMAIN}/${SUBFOLDER}${CODENAME}/binary-${ARCH}/${PACKAGE}/${DEB}${SUFFIX}
			if [ $? -ne 0 ]; then
				_sf
				wget -t5 -T10 -q -O ${DEB} https://${DOMAIN}/${SUBFOLDER}${CODENAME}/binary-${ARCH}/${PACKAGE}/${DEB}${SUFFIX}
			fi
		fi
		;;
	*)
		_github
		wget -t3 -T10 -q -O ${DEB} https://${DOMAIN}/${SUBFOLDER}${CODENAME}/binary-${ARCH}/${PACKAGE}/${DEB}${SUFFIX}
		if [ $? -ne 0 ]; then
			_cf
			wget -t5 -T20 -q -O ${DEB} https://${DOMAIN}/${SUBFOLDER}${CODENAME}/binary-${ARCH}/${PACKAGE}/${DEB}${SUFFIX}
			if [ $? -ne 0 ]; then
				_sf
				wget -t5 -T10 -q -O ${DEB} https://${DOMAIN}/${SUBFOLDER}${CODENAME}/binary-${ARCH}/${PACKAGE}/${DEB}${SUFFIX}
			fi
		fi
		;;
	esac
}

function _updateApp() {
	# get current version
	_info "Fetching package list..."
	cd /tmp || exit 1
	wget -t3 -T20 -q -O packages.lst https://deb.ezapi.net/packages.lst
	if [ $? -ne 0 ]; then
		_github
		wget -t5 -T10 -q -O packages.lst https://raw.githubusercontent.com/amefs/quickbox-files/master/packages.lst
		if [ $? -ne 0 ]; then
			_sf
			wget -t5 -T10 -q -O packages.lst https://sourceforge.net/projects/seedbox-software-for-linux/files/packages.lst/download
		fi
	fi
	qbit_version_list=$(cat packages.lst | grep -w qbittorrent-nox | grep ${CODENAME} | grep armhf | awk '{ print $5}')
	rm -f packages.lst
	cur_version=$(dpkg -s qbittorrent-nox 2>/dev/null | grep '^Version:' | grep -Eo "[0-9.]+" | head -n1)
	# version check
	# detect installed version
	if [[ -f /install/.libtorrent-rasterbar9.lock ]]; then
		libt_installed_version=$(dpkg -s libtorrent-rasterbar9 | grep '^Version:' | grep -Eo "[0-9.]+" | head -n1)
		libt_installed_major_version=$(echo ${libt_installed_version}| cut -d. -f1,2)
	elif [[ -f /install/.libtorrent-rasterbar10.lock ]]; then
		libt_installed_version=$(dpkg -s libtorrent-rasterbar10 | grep '^Version:' | grep -Eo "[0-9.]+" | head -n1)
		libt_installed_major_version=$(echo ${libt_installed_version}| cut -d. -f1,2)
	elif [[ -f /install/.libtorrent-rasterbar.lock ]]; then
		libt_installed_version=$(dpkg -s libtorrent-rasterbar | grep '^Version:' | grep -Eo "[0-9.]+" | head -n1)
		libt_installed_major_version=$(echo ${libt_installed_version}| cut -d. -f1,2)
	else
		libt_installed_version=0
		libt_installed_major_version=0
	fi
	qbit_major_version=$(echo ${qbitversion}| cut -d. -f1,2)
	if ! (_version_gt "4.3" ${qbit_major_version}); then
		if (_version_gt "1.2.10" ${libt_installed_version}); then
			libtversion="1.2.10"
			libt_major_version="1.2"
			_warning "Use Libtorrent ${libtversion} against qBittorrent 4.3.x"
			_info "Upgrading libtorrent-rasterbar..."
			_execute "apt-mark unhold qbittorrent-nox"
			PACKAGE="libtorrent-rasterbar"
			cd /tmp || exit 1
			LIBTBIN=libtorrent-rasterbar10_${libtversion}-1build1_armhf.deb
			DEB=${LIBTBIN}
			_download ${PACKAGE} ${DEB}
			_execute "apt-get -y --allow-unauthenticated --allow-downgrades -f install  /tmp/${LIBTBIN}"
			LIBTDEVBIN=libtorrent-rasterbar-dev_${libtversion}-1build1_armhf.deb
			DEB=${LIBTDEVBIN}
			_download ${PACKAGE} ${DEB}
			_execute "apt-get -y --allow-unauthenticated --allow-downgrades -f install  /tmp/${LIBTDEVBIN}"
			rm -rf {${LIBTBIN},${LIBTDEVBIN}}
			touch /install/.libtorrent-rasterbar10.lock
			libt_installed_version=${libtversion}
			libt_installed_major_version=${libt_major_version}
			_execute "apt-mark hold qbittorrent-nox"
		fi
	fi
	if (_version_gt ${qbitversion} ${cur_version}) ||  [[ $FORCE == 1 ]] ; then
		if (_version_gt "4.2" ${qbit_major_version}); then
			if (_version_gt ${libt_installed_version} "1.2"); then
				libtversion="1.1.14"
				libt_major_version="1.1"
				_warning "Use Libtorrent ${libtversion} against qBittorrent ${qbitversion}"
				_info "Upgrading libtorrent-rasterbar..."
				_execute "apt-mark unhold qbittorrent-nox"
				PACKAGE="libtorrent-rasterbar"
				cd /tmp || exit 1
				LIBTBIN=libtorrent-rasterbar10_${libtversion}-1build1_armhf.deb
				DEB=${LIBTBIN}
				_download ${PACKAGE} ${DEB}
				_execute "apt-get -y --allow-unauthenticated --allow-downgrades -f install  /tmp/${LIBTBIN}"
				LIBTDEVBIN=libtorrent-rasterbar-dev_${libtversion}-1build1_armhf.deb
				DEB=${LIBTDEVBIN}
				_download ${PACKAGE} ${DEB}
				_execute "apt-get -y --allow-unauthenticated --allow-downgrades -f install  /tmp/${LIBTDEVBIN}"
				rm -rf {${LIBTBIN},${LIBTDEVBIN}}
				touch /install/.libtorrent-rasterbar9.lock
				libt_installed_version=${libtversion}
				libt_installed_major_version=${libt_major_version}
				_execute "apt-mark hold qbittorrent-nox"
			fi
		fi
	fi
	if (_version_gt ${qbitversion} ${cur_version}) ||  [[ $FORCE == 1 ]] ; then
		_info "Upgrading ${APP_TITLE}..."
		_info "Removing old ${APP_TITLE}..."
		userlist=$(cat $(find /root/.qbuser/ -type f) | cut -d: -f1)
		for username in $userlist; do
			_execute "systemctl stop ${APP_SERVICE}@${username}"
		done
		_execute "apt-mark unhold qbittorrent-nox"
		_execute "apt remove -y qbittorrent-nox"
		if $(echo "${qbit_version_list[@]}" | grep -wq "${qbitversion}") && [ ! -f /install/.libtorrent-rasterbar.lock ]; then
			cd /tmp || exit 1
			if (_version_gt ${qbitversion} 4.1.9.1); then
				if [[ "$CODENAME" =~ ("xenial"|"stretch") ]]; then
					PACKAGE="qt5"
					cd /tmp
					QTBIN=qt512base_5.12.6-1basyskom1_armhf.deb
					DEB=${QTBIN}
					_download ${PACKAGE} ${DEB}
					_execute "apt-get -y --allow-unauthenticated --allow-downgrades -f install  /tmp/${QTBIN}"
					rm -rf ${QTBIN}
				fi
			fi
			PACKAGE="qbittorrent"
			QBITBIN=qbittorrent-nox_${qbitversion}-libt${libt_installed_major_version}-1build1_armhf.deb
			DEB=${QBITBIN}
			_download ${PACKAGE} ${DEB}
			_execute "apt-get -y --allow-unauthenticated --allow-downgrades -f install /tmp/${QBITBIN}"
			rm -rf ${QBITBIN}

			# disable auto upgrade
			_execute "apt-mark hold qbittorrent-nox"
		else
			# prepare package toolchain
			APP_BASEDEPS="build-essential libgl1-mesa-dev libssl-dev libboost-dev libboost-system-dev libboost-chrono-dev libboost-random-dev libboost-python-dev python python-dev python3 python3-dev pkg-config automake libtool git screen libgeoip-dev qtbase5-dev qttools5-dev-tools libqt5svg5-dev zlib1g-dev"
			_info "Adding additional keys and sources ${APP_TITLE}..."
			if [ $CODENAME == "xenial" ] && $(grep -qv 'xenial-updates'< /etc/apt/sources.list); then
				cat > /etc/apt/sources.list.d/xenial-updates.list <<LIST
deb http://us.archive.ubuntu.com/ubuntu/ xenial-updates main
LIST
			elif [ $CODENAME == "stretch" ] && $(grep -qv 'stretch-backports'< /etc/apt/sources.list); then
				cat > /etc/apt/sources.list.d/stretch-backports.list <<LIST
deb http://deb.debian.org/debian stretch-backports main	
LIST
			fi
			_success "Keys and sources added."
			DEBIAN_FRONTEND=noninteractive apt-get -yqq -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" update >/dev/null 2>&1
			_installDepends
			_installFpm
			if (_version_gt ${qbitversion} 4.1.9.1); then
				if [[ "$CODENAME" =~ ("xenial"|"stretch") ]]; then
					PACKAGE="qt5"
					cd /tmp
					DEBASE="qt512base_5.12.6-1basyskom1_armhf.deb qt512xmlpatterns_5.12.6-1basyskom1_armhf.deb qt512declarative_5.12.6-1basyskom1_armhf.deb qt512svg_5.12.6-1basyskom1_armhf.deb qt512tools_5.12.6-1basyskom1_armhf.deb"
					for DEB in $DEBASE; do
						_download ${PACKAGE} ${DEB}
						_execute "apt-get -y --allow-unauthenticated -f install /tmp/${DEB}"
						rm -rf /tmp/${DEB}
					done
					source /opt/qt512/bin/qt512-env.sh
					if [[ ! -f /usr/bin/lrelease-qt5 ]]; then
						ln -s /usr/lib/x86_64-linux-gnu/qt5/bin/lrelease /usr/bin/lrelease-qt5
					fi
				fi
			fi
			cd /tmp || exit 1
			_info "Building $APP_TITLE ... "
			_execute "git clone ${BRANCH_QBIT} qBittorrent"
			cd qBittorrent || { _error "Can not download qBittorrent" && exit 1; }
			_execute "git checkout release-${qbitversion}"
			_execute "./configure --disable-gui --disable-debug --prefix=/tmp/dist/qbittorrent"
			_execute "make -j$(nproc)"
			mkdir -p /tmp/dist/qbittorrent
			mkdir -p /root/pool/
			_execute "make install"
			fpm -f -C /tmp/dist/qbittorrent -p /root/pool/qbittorrent_${qbitversion}.deb -s dir -t deb -n qbittorrent-nox --version ${qbitversion} --description "qBittorrent compiled by QuickBox Lite" >/dev/null 2>&1
			_execute "dpkg -i /root/pool/qbittorrent_${qbitversion}.deb"
			cd /tmp || exit 1
			rm -rf {qBittorrent,libtorrent,dist}
			# disable auto upgrade
			_execute "apt-mark hold qbittorrent-nox"
		fi
		# Update qbittorrent-nox binary location
		BINPATH=$(which qbittorrent-nox)
		cat >/etc/systemd/system/qbittorrent@.service <<QBS
[Unit]
Description=qBittorrent Daemon Service
After=network.target

[Service]
Type=forking
User=%I
LimitNOFILE=infinity
ExecStart=${BINPATH} -d
ExecStop=/usr/bin/killall -w -s 9 ${BINPATH}
TimeoutSec=300

[Install]
WantedBy=multi-user.target
QBS
		_execute "systemctl daemon-reload"
		if (_version_gt ${qbitversion} 4.1.9.1) && (_version_gt 4.2.0 ${cur_version}); then
			_reconfigureAppv2
		elif (_version_gt 4.2.0 ${qbitversion}) && (_version_gt ${cur_version} 4.1.9.1); then
			_reconfigureAppv1
		fi
		userlist=$(cat $(find /root/.qbuser/ -type f) | cut -d: -f1)
		for username in $userlist; do
			_execute "systemctl start ${APP_SERVICE}@${username}"
		done
		_success "${APP_TITLE} is now update to date."
	else
		_warning "Nothing to be update"
	fi
}

function _reconfigureAppv1() {
	_info "Configuring ${APP_TITLE}..."
	# get userlist
	userlist=$(cat $(find /root/.qbuser/ -type f) | cut -d: -f1)
	for username in $userlist; do
		passphrase=$(cat /root/.ssh/local_user)
		passtext=$(cat /root/.qbuser/${username}.info | cut -d: -f2)
		if [[ $CODENAME == xenial ]]; then
			password=$(echo ${passtext} | openssl enc -aes-128-ecb -a -d -pass pass:"${passphrase}" -nosalt)
		else
			password=$(echo ${passtext} | openssl enc -aes-128-ecb -pbkdf2 -a -d -pass pass:"${passphrase}" -nosalt)
		fi

		ha1pass=$(echo -n "${password}" | md5sum | cut -f1 -d' ')
		sed -i "s|Password_PBKDF2.*|Password_ha1=@ByteArray(${ha1pass})|g" /home/${username}/.config/qBittorrent/qBittorrent.conf
	done
	_success "${APP_TITLE} configured."
}

function _reconfigureAppv2() {
	_info "Configuring ${APP_TITLE}..."
	# get libqbpasswd
	## See https://github.com/KozakaiAya/libqbpasswd
	cd /tmp
	_info "Building libqbpasswd ... "
	_execute "apt-get install -yqq build-essential"
	_execute "git clone ${BRANCH_LIBQBPASS} libqbpasswd"
	cd libqbpasswd
	_execute "make"
	_execute "cp -f qb_password_gen /usr/local/bin/quickbox/system/auxiliary/qb_password_gen"
	cd /tmp
	rm -rf /tmp/libqbpasswd
	
	# get userlist
	userlist=$(cat $(find /root/.qbuser/ -type f) | cut -d: -f1)
	for username in $userlist; do
		passphrase=$(cat /root/.ssh/local_user)
		passtext=$(cat /root/.qbuser/${username}.info | cut -d: -f2)
		if [[ $CODENAME == xenial ]]; then
			password=$(echo ${passtext} | openssl enc -aes-128-ecb -a -d -pass pass:"${passphrase}" -nosalt)
		else
			password=$(echo ${passtext} | openssl enc -aes-128-ecb -pbkdf2 -a -d -pass pass:"${passphrase}" -nosalt)
		fi

		pbkdf2pass=$(/usr/local/bin/quickbox/system/auxiliary/qb_password_gen ${password})
		sed -i "s|Password_ha1.*|Password_PBKDF2=\"@ByteArray(${pbkdf2pass})\"|g" /home/${username}/.config/qBittorrent/qBittorrent.conf
	done
	_success "${APP_TITLE} configured."
}

function _flexget() {
	username=$(cat /root/.admin.info | cut -d: -f1)
	if [[ -f "/install/.${username}.flexget.lock" ]]; then
		fgversion=$(su ${username} -c '~/.local/bin/flexget -V | head -1 | cut -d. -f1')
		if [[ ${fgversion} == '2' ]]; then
			bash /usr/local/bin/quickbox/package/update/updatepackage-flexget -l $OUTTO
		fi
	fi
}

#################################################################################
# OPT GENERATOR
#################################################################################
if ! ARGS=$(getopt -a -o hl: -l help,force,with-cf,with-sf,with-osdn,with-github,log:,qb: -- "$@")
then
    _usage
    exit 1
fi
eval set -- "${ARGS}"
while true; do
	case "$1" in
	-h | --help)
		_usage
		exit 1
		;;
	--force)
		FORCE=1
		;;
	-l | --log)
		OUTTO="$2"
		shift
		;;
	--qb)
		qbitversion="$2"
		shift
		;;
	--with-cf)
		cdn="cf"
		;;
	--with-sf)
		cdn="sf"
		;;
	--with-osdn)
		cdn="osdn"
		;;
	--with-github)
		cdn="github"
		;;
	--)
		shift
		break
		;;
	esac
	shift
done

#################################################################################
# MAIN PROCESS
#################################################################################
_lockCheck
_setLock
_updateInfo
_updateApp
_lockCleanup

if (_version_gt ${qbitversion} 4.1.9.1); then
	_flexget
fi
